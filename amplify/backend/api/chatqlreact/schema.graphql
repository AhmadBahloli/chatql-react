type User 
  @model 
  @auth(rules: [{ allow: owner, ownerField: "id", operations: [create, update, delete, read] }]) {
  id: ID! @primaryKey
  username: String!
  conversations: [ConvoLink] @hasMany(indexName: "byUser", fields: ["id"])
  messages: [Message] @hasMany(indexName: "byUser", fields: ["id"])
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

type Conversation
  @model(
    mutations: { create: "createConvo" }
    queries: { get: "getConvo", list: "listConvos" }
    subscriptions: null
  )
  @auth(rules: [{ allow: owner, ownerField: "members", operations: [create, update, delete, read] }]) {
  id: ID! @primaryKey
  messages: [Message] @hasMany(indexName: "byConversation", fields: ["id"])
  associated: [ConvoLink] @hasMany(indexName: "byConversation", fields: ["id"])
  name: String!
  members: [String!]!
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

type Message 
  @model(subscriptions: null, queries: null) 
  @auth(rules: [{ allow: owner, ownerField: "authorId", operations: [create, update, delete, read] }]) {
  id: ID! @primaryKey
  author: User @belongsTo(fields: ["authorId"])
  authorId: String
  content: String!
  conversation: Conversation! @belongsTo(fields: ["messageConversationId"])
  messageConversationId: ID!
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

type ConvoLink 
  @model(
    mutations: { create: "createConvoLink", update: "updateConvoLink" }
    queries: null
    subscriptions: null
  )
  @auth(rules: [
    { allow: owner, ownerField: "convoLinkUserId", operations: [create, update, delete, read] },
    { allow: groups, groups: ["Admin"], operations: [create, update, delete, read] }
  ])
  @key(name: "byUser", fields: ["convoLinkUserId", "createdAt"])
  @key(name: "byConversation", fields: ["convoLinkConversationId", "createdAt"]) {
  id: ID! @primaryKey
  user: User! @belongsTo(fields: ["convoLinkUserId"])
  convoLinkUserId: ID
  conversation: Conversation! @belongsTo(fields: ["convoLinkConversationId"])
  convoLinkConversationId: ID!
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

type Subscription {
  onCreateConvoLink(convoLinkUserId: ID!): ConvoLink
    @aws_subscribe(mutations: ["createConvoLink"])
  onCreateMessage(messageConversationId: ID!): Message
    @aws_subscribe(mutations: ["createMessage"])
}
